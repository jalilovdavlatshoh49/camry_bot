import re
import datetime
from aiogram import Router, types, F
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from bot.keyboards import get_main_kb, get_register_kb
from bot.services.logic import (
    add_user,
    is_registered,
    insert_request
)

from config import ADMIN_ID
from bot.dispatcher import bot

router = Router()

# === –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ===
class PUKStates(StatesGroup):
    waiting_for_vin = State()


# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@router.message(CommandStart())
async def start_cmd(msg: types.Message):
    user_id = msg.from_user.id

    if await is_registered(user_id):
        await msg.answer("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=get_main_kb())
    else:
        await msg.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
            "–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ—Å—Ç—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
        )
        await msg.answer(
            "üì≤ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
            reply_markup=get_register_kb()
        )


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
@router.message(F.contact)
async def register_user_handler(msg: types.Message):
    contact = msg.contact

    if contact.user_id != msg.from_user.id:
        await msg.answer(
            "‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ *—Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π* –∫–æ–Ω—Ç–∞–∫—Ç —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏.",
            parse_mode="Markdown"
        )
        return

    user_id = contact.user_id
    first_name = msg.from_user.first_name or ""
    last_name = msg.from_user.last_name or ""
    phone = contact.phone_number

    await add_user(user_id, first_name, last_name, phone)

    await msg.answer(
        f"üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
        f"üë§ –ò–º—è: {first_name} {last_name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}",
        reply_markup=get_main_kb()
    )


# === –ö–æ–º–∞–Ω–¥–∞ "–ü–£–ö –Ω–æ–≤—ã–π" ===
@router.message(F.text.casefold() == "–ø—É–∫ –Ω–æ–≤—ã–π")
async def new_puk(msg: types.Message, state: FSMContext):
    if not await is_registered(msg.from_user.id):
        await msg.answer("‚ùóÔ∏è–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
        return

    await state.set_state(PUKStates.waiting_for_vin)
    await msg.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ü–£–ö (–≤ —Ñ–æ—Ä–º–∞—Ç–µ: VIN_–Ω–æ–º–µ—Ä)")


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –ü–£–ö –∑–∞–ø—Ä–æ—Å–∞ (VIN_–Ω–æ–º–µ—Ä) ===
@router.message(PUKStates.waiting_for_vin)
async def handle_puk_request(msg: types.Message, state: FSMContext):
    text = msg.text.strip()

    if not re.fullmatch(r"[A-Z0-9]+_[0-9]+", text, flags=re.IGNORECASE):
        await msg.answer("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ü–£–ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ VIN_–Ω–æ–º–µ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä ABC1234_5678")
        return

    vin, number = text.split("_")
    vin = vin.upper()
    now = datetime.datetime.now().isoformat()

    await insert_request(msg.from_user.id, vin, number, now)
    await state.clear()

    await msg.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –∞–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É.")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    text_admin = (
        f"üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–¥!\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg.from_user.full_name}\n"
        f"üÜî ID: {msg.from_user.id}\n"
        f"üöò VIN: {vin}\n"
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve:{msg.from_user.id}:{vin}:{number}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{msg.from_user.id}")
        ]
    ])

    await bot.send_message(ADMIN_ID, text_admin, reply_markup=kb)


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
@router.message(lambda msg: msg.text and not msg.text.startswith("/"))
async def process_input(msg: types.Message, state: FSMContext):
    if not await is_registered(msg.from_user.id):
        await msg.answer("‚ùóÔ∏è–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
        return

    current_state = await state.get_state()
    if current_state == PUKStates.waiting_for_vin.state:
        await msg.answer("‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ü–£–ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ VIN_–Ω–æ–º–µ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä ABC1234_5678")
        return

    await msg.answer("‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–£–ö –Ω–æ–≤—ã–π', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –ü–£–ö-–∫–æ–¥–∞.")