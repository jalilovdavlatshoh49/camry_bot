import logging
import datetime
import random
import hashlib
from typing import List, Tuple

from aiogram import Router, types, F
from aiogram.filters import BaseFilter, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from bot.dispatcher import bot
from config import ADMIN_ID
from bot.services.logic import (
    update_request_status,
    insert_code,
    delete_request,
    search_user,
    get_approved_vins
)

router = Router()
logger = logging.getLogger(__name__)


# === –§–∏–ª—Ç—Ä–∏ –æ–¥–¥”£ –±–∞—Ä–æ–∏ –∞–¥–º–∏–Ω ===
class IsAdmin(BaseFilter):
    async def __call__(self, message: Message) -> bool:
        return message.from_user.id == ADMIN_ID


# === –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ ===
class SearchStates(StatesGroup):
    waiting_for_query = State()


# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ PUK ===
def generate_code_from_puk(puk: str, length: int = 6) -> str:
    hash_object = hashlib.sha256(puk.encode())
    hex_dig = hash_object.hexdigest()
    big_int = int(hex_dig, 16)
    digits = str(big_int % (10 ** length)).zfill(length)
    return digits


# === –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VIN-–∫–æ–¥–æ–≤ ===
def format_vin_info(vins: List[Tuple[str, str]]) -> str:
    if not vins:
        return "‚ùå –£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö VIN-–∫–æ–¥–æ–≤."

    vin_lines = "\n".join(f"‚úÖ VIN: <code>{vin}</code> | üìÖ –î–∞—Ç–∞: {date}" for vin, date in vins)
    return f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ VIN-–∫–æ–¥—ã ({len(vins)}):\n\n{vin_lines}"


# === –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ===
def format_user_info(user: Tuple[int, str, str, str], vins: List[Tuple[str, str]]) -> str:
    user_id, first_name, last_name, phone = user
    vin_info = format_vin_info(vins)
    return (
        f"üë§ <b>{first_name} {last_name}</b>\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: <code>{phone}</code>\n"
        f"üÜî ID: <code>{user_id}</code>\n\n"
        f"{vin_info}"
    )


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ "–û–¥–æ–±—Ä–∏—Ç—å" –∑–∞—è–≤–∫–∏ ===
@router.callback_query(F.data.startswith("approve"))
async def handle_approve(callback: CallbackQuery):
    try:
        parts = callback.data.split(":")
        if len(parts) != 4:
            raise ValueError("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö.")

        _, user_id_str, vin, number = parts
        user_id = int(user_id_str)

        puk = f"{vin}_{number}".upper()
        code = generate_code_from_puk(puk)
        timestamp = datetime.datetime.now().isoformat()

        await update_request_status(user_id, vin, number, "approved")
        await insert_code(user_id, vin, number, code, timestamp)

        await bot.send_message(
            user_id,
            f"‚úÖ –í–∞—à –∫–æ–¥: <code>{code}</code>\n–í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.",
            parse_mode="HTML"
        )
        await callback.answer("‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_approve: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.", show_alert=True)


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å" –∑–∞—è–≤–∫–∏ ===
@router.callback_query(F.data.startswith("reject"))
async def handle_reject(callback: CallbackQuery):
    try:
        parts = callback.data.split(":")
        if len(parts) != 2:
            raise ValueError("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö.")

        _, user_id_str = parts
        user_id = int(user_id_str)

        await delete_request(user_id)
        await bot.send_message(user_id, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º.")
        await callback.answer("üö´ –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_reject: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏.", show_alert=True)


# === –ö–æ–º–∞–Ω–¥–∞ /search (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞) ===
@router.message(Command("search"), IsAdmin())
async def cmd_search(msg: Message, state: FSMContext):
    await msg.answer("üîç –í–≤–µ–¥–∏—Ç–µ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é, —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(SearchStates.waiting_for_query)


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–∏—Å–∫–∞ ===
@router.message(SearchStates.waiting_for_query)
async def handle_search_query(msg: Message, state: FSMContext):
    query = msg.text.strip()
    try:
        users = await search_user(query)
        if not users:
            await msg.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        for user in users:
            user_id = user[0]
            vins = await get_approved_vins(user_id)
            formatted = format_user_info(user, vins)
            await msg.answer(formatted, parse_mode="HTML")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–∏—Å–∫–µ: {e}")
        await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    await state.clear()