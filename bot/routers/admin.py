from aiogram import Router, types, F
from aiogram.filters import BaseFilter, Command
from aiogram.types import Message
import datetime
import random

from bot.dispatcher import bot
from config import ADMIN_ID
from bot.services.logic import (
    update_request_status,
    insert_code,
    delete_request,
    search_user,
    get_approved_vins
)

router = Router()


# –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
class IsAdmin(BaseFilter):
    async def __call__(self, message: Message) -> bool:
        return message.from_user.id == ADMIN_ID


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û–¥–æ–±—Ä–∏—Ç—å"
@router.callback_query(F.data.startswith("approve"))
async def approve_code(callback: types.CallbackQuery):
    _, user_id, vin, number = callback.data.split(":")
    user_id = int(user_id)
    code = ''.join(random.choices('0123456789', k=6))
    now = datetime.datetime.now().isoformat()

    await update_request_status(user_id, vin, number, "approved")
    await insert_code(user_id, vin, number, code, now)

    await bot.send_message(
        user_id,
        f"‚úÖ –í–∞—à –∫–æ–¥: <code>{code}</code>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.",
        parse_mode="HTML"
    )
    await callback.answer("–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å"
@router.callback_query(F.data.startswith("reject"))
async def reject_code(callback: types.CallbackQuery):
    _, user_id = callback.data.split(":")
    user_id = int(user_id)

    await delete_request(user_id)
    await bot.send_message(user_id, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º.")
    await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")


# –ö–æ–º–∞–Ω–¥–∞ /–ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
@router.message(Command("–ø–æ–∏—Å–∫"), IsAdmin())
async def cmd_search(msg: types.Message):
    await msg.answer("üîç –í–≤–µ–¥–∏—Ç–µ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /–ø–æ–∏—Å–∫
@router.message()
async def handle_search_query(msg: types.Message):
    query = msg.text.strip()
    users = await search_user(query)

    if not users:
        await msg.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    for user in users:
        user_id, first_name, last_name, phone = user
        vins = await get_approved_vins(user_id)

        if not vins:
            vin_info = "–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö VIN-–∫–æ–¥–æ–≤."
        else:
            vin_lines = "\n".join([
                f"‚úÖ VIN: <code>{vin}</code> | üìÖ –î–∞—Ç–∞: {date}" for vin, date in vins
            ])
            vin_info = (
                f"–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç {len(vins)} VIN-–∫–æ–¥–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ‚úÖ 'approved':\n\n{vin_lines}"
            )

        await msg.answer(
            f"üë§ <b>{first_name} {last_name}</b>\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: <code>{phone}</code>\n"
            f"üÜî ID: <code>{user_id}</code>\n\n"
            f"{vin_info}",
            parse_mode="HTML"
        )
