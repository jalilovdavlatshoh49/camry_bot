import logging
from typing import List, Tuple

from aiogram import Router, types, F
from aiogram.filters import BaseFilter, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import datetime
import random

from bot.dispatcher import bot
from config import ADMIN_ID
from bot.services.logic import (
    update_request_status,
    insert_code,
    delete_request,
    search_user,
    get_approved_vins
)

router = Router()

logger = logging.getLogger(__name__)

class IsAdmin(BaseFilter):
    async def __call__(self, message: Message) -> bool:
        return message.from_user.id == ADMIN_ID

class SearchStates(StatesGroup):
    waiting_for_query = State()


def generate_code(length: int = 6) -> str:
    return ''.join(random.choices('0123456789', k=length))


def format_vin_info(vins: List[Tuple[str, str]]) -> str:
    if not vins:
        return "–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö VIN-–∫–æ–¥–æ–≤."
    vin_lines = "\n".join(f"‚úÖ VIN: <code>{vin}</code> | üìÖ –î–∞—Ç–∞: {date}" for vin, date in vins)
    return f"–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç {len(vins)} VIN-–∫–æ–¥–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ‚úÖ 'approved':\n\n{vin_lines}"


def format_user_info(user: Tuple[int, str, str, str], vins: List[Tuple[str, str]]) -> str:
    user_id, first_name, last_name, phone = user
    vin_info = format_vin_info(vins)
    return (
        f"üë§ <b>{first_name} {last_name}</b>\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: <code>{phone}</code>\n"
        f"üÜî ID: <code>{user_id}</code>\n\n"
        f"{vin_info}"
    )


@router.callback_query(F.data.startswith("approve"))
async def handle_approve(callback: CallbackQuery):
    try:
        parts = callback.data.split(":")
        if len(parts) != 4:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π –≤ callback data")

        _, user_id_str, vin, number = parts
        user_id = int(user_id_str)

        code = generate_code()
        timestamp = datetime.datetime.now().isoformat()

        await update_request_status(user_id, vin, number, "approved")
        await insert_code(user_id, vin, number, code, timestamp)

        await bot.send_message(
            user_id,
            f"‚úÖ –í–∞—à –∫–æ–¥: <code>{code}</code>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.",
            parse_mode="HTML"
        )
        await callback.answer("–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚úÖ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_approve: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏.", show_alert=True)


@router.callback_query(F.data.startswith("reject"))
async def handle_reject(callback: CallbackQuery):
    try:
        parts = callback.data.split(":")
        if len(parts) != 2:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π –≤ callback data")

        _, user_id_str = parts
        user_id = int(user_id_str)

        await delete_request(user_id)
        await bot.send_message(user_id, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º.")
        await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ üö´")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_reject: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏.", show_alert=True)


@router.message(Command("search"), IsAdmin())
async def cmd_search(msg: Message, state: FSMContext):
    await state.set_state(SearchStates.waiting_for_query)
    await msg.answer("üîç –í–≤–µ–¥–∏—Ç–µ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    


@router.message(SearchStates.waiting_for_query)
async def handle_search_query(msg: Message, state: FSMContext):
    query = msg.text.strip()
    try:
        users = await search_user(query)
        if not users:
            await msg.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        for user in users:
            user_id = user[0]
            vins = await get_approved_vins(user_id)
            formatted_message = format_user_info(user, vins)
            await msg.answer(formatted_message, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_search_query: {e}")
        await msg.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    await state.clear()